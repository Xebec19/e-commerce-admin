// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO public.categories
(category_name, created_on, image_url, status)
VALUES($1, CURRENT_TIMESTAMP, $2, 'active'::enum_status)
`

type CreateCategoryParams struct {
	CategoryName string         `json:"category_name"`
	ImageUrl     sql.NullString `json:"image_url"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory, arg.CategoryName, arg.ImageUrl)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
UPDATE public.categories SET
status = 'inactive'::enum_status
WHERE category_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, categoryID)
	return err
}

const readCategory = `-- name: ReadCategory :many
SELECT category_id, category_name, created_on, image_url, status
FROM public.categories WHERE status = 'active'::enum_status order by created_on desc
`

func (q *Queries) ReadCategory(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, readCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.CreatedOn,
			&i.ImageUrl,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readCategoryByID = `-- name: ReadCategoryByID :one
SELECT category_id, category_name, created_on, image_url, status
FROM public.categories WHERE category_id = $1
`

func (q *Queries) ReadCategoryByID(ctx context.Context, categoryID int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, readCategoryByID, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.CreatedOn,
		&i.ImageUrl,
		&i.Status,
	)
	return i, err
}

const updateCategoryById = `-- name: UpdateCategoryById :exec
UPDATE public.categories SET 
category_name = $1,
image_url = $2
WHERE category_id = $3 and status = 'active'::enum_status
`

type UpdateCategoryByIdParams struct {
	CategoryName string         `json:"category_name"`
	ImageUrl     sql.NullString `json:"image_url"`
	CategoryID   int32          `json:"category_id"`
}

func (q *Queries) UpdateCategoryById(ctx context.Context, arg UpdateCategoryByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateCategoryById, arg.CategoryName, arg.ImageUrl, arg.CategoryID)
	return err
}
