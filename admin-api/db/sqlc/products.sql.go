// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
)

const deleteOneProduct = `-- name: DeleteOneProduct :exec
UPDATE public.products SET status = 'inactive' where product_id = $1
`

func (q *Queries) DeleteOneProduct(ctx context.Context, productID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOneProduct, productID)
	return err
}

const readOneProduct = `-- name: ReadOneProduct :one
SELECT product_id, product_name, image_url, quantity, created_on, price, delivery_price, product_desc, gender, category_id, category_name, country_id, country_name
FROM public.v_products WHERE product_id = $1
`

func (q *Queries) ReadOneProduct(ctx context.Context, productID int32) (VProduct, error) {
	row := q.db.QueryRowContext(ctx, readOneProduct, productID)
	var i VProduct
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.ImageUrl,
		&i.Quantity,
		&i.CreatedOn,
		&i.Price,
		&i.DeliveryPrice,
		&i.ProductDesc,
		&i.Gender,
		&i.CategoryID,
		&i.CategoryName,
		&i.CountryID,
		&i.CountryName,
	)
	return i, err
}

const readProducts = `-- name: ReadProducts :many
SELECT product_id, product_name, image_url, quantity, created_on, price, delivery_price, product_desc, gender, category_id, category_name, country_id, country_name, count(product_id) over () as total_count
FROM public.v_products
`

type ReadProductsRow struct {
	ProductID     int32          `json:"product_id"`
	ProductName   string         `json:"product_name"`
	ImageUrl      string         `json:"image_url"`
	Quantity      sql.NullInt32  `json:"quantity"`
	CreatedOn     sql.NullTime   `json:"created_on"`
	Price         sql.NullInt32  `json:"price"`
	DeliveryPrice sql.NullInt32  `json:"delivery_price"`
	ProductDesc   sql.NullString `json:"product_desc"`
	Gender        NullEnumGender `json:"gender"`
	CategoryID    int32          `json:"category_id"`
	CategoryName  string         `json:"category_name"`
	CountryID     int32          `json:"country_id"`
	CountryName   string         `json:"country_name"`
	TotalCount    int64          `json:"total_count"`
}

func (q *Queries) ReadProducts(ctx context.Context) ([]ReadProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, readProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadProductsRow
	for rows.Next() {
		var i ReadProductsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.ImageUrl,
			&i.Quantity,
			&i.CreatedOn,
			&i.Price,
			&i.DeliveryPrice,
			&i.ProductDesc,
			&i.Gender,
			&i.CategoryID,
			&i.CategoryName,
			&i.CountryID,
			&i.CountryName,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOneProduct = `-- name: UpdateOneProduct :exec
UPDATE public.products SET category_id = $1, product_name = $2, price = $3, delivery_price = $4, gender = $5, product_desc = $6, quantity = $7, updated_on = current_timestamp WHERE product_id = $8
`

type UpdateOneProductParams struct {
	CategoryID    sql.NullInt32  `json:"category_id"`
	ProductName   string         `json:"product_name"`
	Price         sql.NullInt32  `json:"price"`
	DeliveryPrice sql.NullInt32  `json:"delivery_price"`
	Gender        NullEnumGender `json:"gender"`
	ProductDesc   sql.NullString `json:"product_desc"`
	Quantity      sql.NullInt32  `json:"quantity"`
	ProductID     int32          `json:"product_id"`
}

func (q *Queries) UpdateOneProduct(ctx context.Context, arg UpdateOneProductParams) error {
	_, err := q.db.ExecContext(ctx, updateOneProduct,
		arg.CategoryID,
		arg.ProductName,
		arg.Price,
		arg.DeliveryPrice,
		arg.Gender,
		arg.ProductDesc,
		arg.Quantity,
		arg.ProductID,
	)
	return err
}
