// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orders.sql

package db

import (
	"context"
)

const readOrderCountDaywise = `-- name: ReadOrderCountDaywise :many
select to_char(date_trunc('day',created_on), 'YYYY-MM-DD') as day, count(*) as total_orders from orders 
where created_on >= CURRENT_DATE - INTERVAL '4 months'
group by date_trunc('day',created_on)
`

type ReadOrderCountDaywiseRow struct {
	Day         string `json:"day"`
	TotalOrders int64  `json:"total_orders"`
}

func (q *Queries) ReadOrderCountDaywise(ctx context.Context) ([]ReadOrderCountDaywiseRow, error) {
	rows, err := q.db.QueryContext(ctx, readOrderCountDaywise)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadOrderCountDaywiseRow
	for rows.Next() {
		var i ReadOrderCountDaywiseRow
		if err := rows.Scan(&i.Day, &i.TotalOrders); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readOrderCountMonthwise = `-- name: ReadOrderCountMonthwise :many
select to_char(date_trunc('month',created_on), 'MM') as month, count(*) as total_orders from orders 
where extract(year from created_on) = extract(year from current_date)
group by date_trunc('month',created_on)
`

type ReadOrderCountMonthwiseRow struct {
	Month       string `json:"month"`
	TotalOrders int64  `json:"total_orders"`
}

func (q *Queries) ReadOrderCountMonthwise(ctx context.Context) ([]ReadOrderCountMonthwiseRow, error) {
	rows, err := q.db.QueryContext(ctx, readOrderCountMonthwise)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadOrderCountMonthwiseRow
	for rows.Next() {
		var i ReadOrderCountMonthwiseRow
		if err := rows.Scan(&i.Month, &i.TotalOrders); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
